package gui;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;


import laboratorio02.ArregloPrecios;

import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JOptionPane;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Font;

public class Problema01 extends JFrame implements ActionListener {

	private static final long serialVersionUID = 1L;
	
	private JPanel contentPane;
	private JLabel lblNumero;
	private JTextField txtNumero;
	private JButton btnAdicionar;
	private JButton btnreemplazarUltimoPrecioMenorQue900;
	private JButton btnincrementarPreciosMenoresQue1100;
	private JButton btneliminarUltimoPrecioMenorQue900;
	private JScrollPane scrollPane;
	private JTextArea txtS;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Problema01 frame = new Problema01();
					frame.setVisible(true);
				}
				catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public Problema01() {
		setTitle("Problema01");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 741, 500);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		lblNumero = new JLabel("Número");
		lblNumero.setBounds(10, 11, 50, 23);
		contentPane.add(lblNumero);

		txtNumero = new JTextField();
		txtNumero.setFont(new Font("Monospaced", Font.PLAIN, 13));
		txtNumero.setBounds(66, 11, 50, 23);
		contentPane.add(txtNumero);
		txtNumero.setColumns(10);

		btnAdicionar = new JButton("Adicionar");
		btnAdicionar.addActionListener(this);
		btnAdicionar.setBounds(380, 48, 318, 23);
		contentPane.add(btnAdicionar);

		btnreemplazarUltimoPrecioMenorQue900 = new JButton("Reemplazar último precio menor que 900");
		btnreemplazarUltimoPrecioMenorQue900.addActionListener(this);
		btnreemplazarUltimoPrecioMenorQue900.setBounds(380, 78, 318, 23);
		contentPane.add(btnreemplazarUltimoPrecioMenorQue900);
		
		btnincrementarPreciosMenoresQue1100 = new JButton("Incrementar precios menores que 1100 ");
		btnincrementarPreciosMenoresQue1100.addActionListener(this);
		btnincrementarPreciosMenoresQue1100.setBounds(380, 108, 318, 23);
		contentPane.add(btnincrementarPreciosMenoresQue1100);
		
		btneliminarUltimoPrecioMenorQue900 = new JButton("Eliminar último precio menor que 900");
		btneliminarUltimoPrecioMenorQue900.addActionListener(this);
		btneliminarUltimoPrecioMenorQue900.setBounds(380, 138, 318, 23);
		contentPane.add(btneliminarUltimoPrecioMenorQue900);

		scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 48, 360, 400);
		contentPane.add(scrollPane);

		txtS = new JTextArea();
		txtS.setFont(new Font("Monospaced", Font.PLAIN, 13));
		scrollPane.setViewportView(txtS);
	}
		
	//  Declaración global
	ArregloPrecios ap = new ArregloPrecios();

	public void actionPerformed(ActionEvent arg0) {
		if (arg0.getSource() == btneliminarUltimoPrecioMenorQue900) {
			reemplazarUltimoPrecioMenorQue900(arg0);
		}
		if (arg0.getSource() == btnincrementarPreciosMenoresQue1100) {
			incrementarPreciosMenoresQue1100(arg0);
		}
		if (arg0.getSource() == btnreemplazarUltimoPrecioMenorQue900) {
			eliminarUltimoPrecioMenorQue900 (arg0);
		}
		if (arg0.getSource() == btnAdicionar) {
			actionPerformedBtnAdicionar(arg0);
		}
		limpieza();
	}
	/**
	 *  Adiciona un número en el arreglo
	 */	
	protected void actionPerformedBtnAdicionar(ActionEvent arg0) {
		try {
			ap.adicionar(leerNumero());
			listar();
		}
		catch (Exception e) {
			mensaje("error de ingreso");
		}
	}
	protected void reemplazarUltimoPrecioMenorQue900(ActionEvent arg0) {
		
	}
	protected void incrementarPreciosMenoresQue1100(ActionEvent arg0) {
		
	}
	protected void eliminarUltimoPrecioMenorQue900(ActionEvent arg0) {
		
		
		
	}
	//  Métodos tipo void (sin parámetros)
	void imprimir() {
		imprimir("");
	}
	void limpieza() {
		txtNumero.setText("");
		txtNumero.requestFocus();
	}
	void listar() {
		txtS.setText("");
		for (int i=0; i<ap.tamanio(); i++)
			imprimir("n[" + i + "] : " + ap.obtener(i));
	}
	//  Métodos tipo void (con parámetros)
	void imprimir(String s) {
		txtS.append(s + "\n");
	}
	void mensaje(String s) {
		JOptionPane.showMessageDialog(this, s);
	}
	//  Métodos que retornan valor (sin parámetros)
	int leerNumero()  {
		return Integer.parseInt(txtNumero.getText().trim());
	}
	
}